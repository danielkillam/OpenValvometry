values<-dailywave$series$mean.r
values<-data.frame(dailywave$series$date,dailywave$series$mean.r)
View(values)
recon<-data.frame(dailywave$series$date,
dailywave$series$mean.r,
dailywave$series$mean)
rm(values)
View(recon)
colnames(recon)<-c("date","dailyvar","original")
recon$resid<-recon$original-recon$dailyvar
plot(recon$date,recon$resid)
recon<-subset(recon,recon$resid<5)
plot(recon$date,recon$resid)
noday<-analyze.wavelet(dailywave, "resid",
loess.span = 0,
dt = 1/60, dj = 1/20,
lowerPeriod = 1,
upperPeriod = 512,
make.pval = TRUE, n.sim = 10)
noday<-analyze.wavelet(recon, "resid",
loess.span = 0,
dt = 1/60, dj = 1/20,
lowerPeriod = 1,
upperPeriod = 512,
make.pval = TRUE, n.sim = 10)
wt.image(noday, color.key = "interval", n.levels = 250,
legend.params = list(lab = "Wavelet Power Levels"),
periodlab = "Period (hours)",
show.date = TRUE, date.format = "%F", timelab = "")
library(ggplot2)
library(lubridate)
library(dplyr)
library(tibbletime)
library(goftest)
library(car)
library(MASS)
library(qqplotr)
View(ysid)
phw<-analyze.wavelet(ysid, "pH",
loess.span = 0,
dt = 1/4, dj = 1/20,
lowerPeriod = 1,
upperPeriod = 512,
make.pval = TRUE, n.sim = 10)
wt.image(phw, color.key = "interval", n.levels = 250,
legend.params = list(lab = "Wavelet Power Levels"),
periodlab = "Period (hours)",
show.date = TRUE, date.format = "%F", timelab = "")
View(envirod)
phw<-analyze.wavelet(envirod, "pH",
loess.span = 0,
dt = 1/4, dj = 1/20,
lowerPeriod = 1,
upperPeriod = 512,
make.pval = TRUE, n.sim = 10)
wt.image(phw, color.key = "interval", n.levels = 250,
legend.params = list(lab = "Wavelet Power Levels"),
periodlab = "Period (hours)",
show.date = TRUE, date.format = "%F", timelab = "")
View(envirod)
dow<-analyze.wavelet(ysid, "ODO.mg.L",
loess.span = 0,
dt = 1/4, dj = 1/20,
lowerPeriod = 1,
upperPeriod = 512,
make.pval = TRUE, n.sim = 10)
wt.image(phw, color.key = "interval", n.levels = 250,
legend.params = list(lab = "Wavelet Power Levels"),
periodlab = "Period (hours)",
show.date = TRUE, date.format = "%F", timelab = "")
wt.image(dow, color.key = "interval", n.levels = 250,
legend.params = list(lab = "Wavelet Power Levels"),
periodlab = "Period (hours)",
show.date = TRUE, date.format = "%F", timelab = "")
View(recon)
ggplot(data=recon)+
geom_line(aes(x=date,y=dailyvar))
ggplot(data=recon)+
geom_line(aes(x=date,y=dailyvar))+
geom_line(aes(x=date,y=original))
reconstruct(my.w, sel.period = 24, plot.waves = TRUE,
show.date=TRUE,date.format = "%Y-%m-%d",
lwd = c(1,2),legend.coords = "topright")
?merge
ysiclean<-data.frame(ysid$timeclean,ysid$ODO.mg.L,ysid$pH,ysid$Chlorophyll.RFU,ysid$TAL.PE.RFU)
View(lightd)
lighttime$ltm<-ymd_hm(paste(lighttime$year,lighttime$month,lighttime$day," ",lighttime$hour,":",lighttime$min))
View(lighttime)
lighttime$ltm<-ymd_hm(paste(lighttime$Year,lighttime$Month,lighttime$Day," ",lighttime$Hour,":",lighttime$Minute))
lighttime %>%
collapse_by("minute") %>%
group_by(ltm)%>%
summarise(mean(INPUT1))
lightminute<-lighttime %>%
collapse_by("minute") %>%
group_by(ltm)%>%
summarise(mean(INPUT1))
colnames(lightminute)<-c("date","mean")
View(lightminute)
View(ysiclean)
colnames(ysiclean)<-c("date","DO","pH","chla","PE")
merge(ysiclean,lightminute,by="date")
lenviro<-merge(ysiclean,lightminute,)
View(lenviro)
colnames(lightminute)<-c("date","light")
lenviro<-merge(ysiclean,lightminute,by="date")
combined<-merge(minutemean,lenviro,by="date")
View(combined)
analyze.coherency(combined, my.pair = c("mean","DO"),
loess.span = 0,
dt = 1/4, dj = 1/20,
lowerPeriod = 1,
upperPeriod = 512,
make.pval = TRUE, n.sim = 10)
docoh<-analyze.coherency(combined, my.pair = c("mean","DO"),
loess.span = 0,
dt = 1/4, dj = 1/20,
lowerPeriod = 1,
upperPeriod = 512,
make.pval = TRUE, n.sim = 10)
wc.image(docoh, which.image = "wc", n.levels = 250,
contour.siglvl = 0.1, arrow.siglvl = 0.05,
legend.params = list(lab = "wavelet coherence levels"))
wc.image(docoh, which.image = "wc", n.levels = 250,
legend.params = list(lab = "wavelet coherence levels"))
wc.image(docoh, which.image = "wc", n.levels = 250,
legend.params = list(lab = "wavelet coherence levels"),periodlab = "Period (hours)",
show.date = TRUE, date.format = "%F", timelab = "")
phcoh<-analyze.coherency(combined, my.pair = c("mean","pH"),
loess.span = 0,
dt = 1/4, dj = 1/20,
lowerPeriod = 1,
upperPeriod = 512,
make.pval = TRUE, n.sim = 10)
wc.image(phcoh, which.image = "wc", n.levels = 250,
legend.params = list(lab = "wavelet coherence levels"),periodlab = "Period (hours)",
show.date = TRUE, date.format = "%F", timelab = "")
ltcoh<-analyze.coherency(combined, my.pair = c("mean","light"),
loess.span = 0,
dt = 1/4, dj = 1/20,
lowerPeriod = 1,
upperPeriod = 512,
make.pval = TRUE, n.sim = 10)
wc.image(ltcoh, which.image = "wc", n.levels = 250,
legend.params = list(lab = "wavelet coherence levels"),periodlab = "Period (hours)",
show.date = TRUE, date.format = "%F", timelab = "")
load("C:/Users/fried/OneDrive/biosphere/valvometry/929.RData")
library(stringr)
library(ggplot2)
library(lubridate)
library(scales)
library(tibbletime)
library(dplyr)
library(ggpubr)
library(zoo)
library(quantmod)
library(pracma)
library(patchwork)
library(tidyverse)
library(stats)
library(TSA)
library(openair)
library(WaveletComp)
library(lme4)
library(MASS)
library(gam)
repl_python()
library(reticulate)
repl_python()
quit
def remove_duplicate_blocks(lines):
num_lines = len(lines)
for idx_start in range(num_lines):
idx_end = num_lines
for idx in range(idx_end, -1, -1):
if idx_start < idx:
dup_candidate_block = lines[idx_start + 1: idx]
len_dup_block = len(dup_candidate_block)
if len_dup_block and len_dup_block < int(num_lines / 2):
for scan_idx in range(idx):
if ((idx_start + 1) > scan_idx
and dup_candidate_block == lines[scan_idx: scan_idx + len_dup_block]):
lines[idx_start + 1: idx] = []
return remove_duplicate_blocks(lines)
return lines
if __name__ == '__main__':
clean_lines = remove_duplicate_blocks(TEXT.split('\n'))
print('\n'.join(clean_lines))
print('\n'.join(clean_lines))````
use_miniconda()
repl_python()
quit
def remove_duplicate_blocks(lines):
num_lines = len(lines)
def remove_duplicate_blocks(lines):
num_lines = len(lines)
print('\n'.join(clean_lines))````
use_miniconda()
repl_python()
import pandas
py_insall pandas
py_install pandas
py_install("pandas")
quit
py_install("pandas")
repl_python()
import pandas
quit
install.packages("tmap")
library(tmap)
library(stringr)
library(ggplot2)
library(lubridate)
library(scales)
library(tibbletime)
library(dplyr)
library(tidyverse)
root<-"C:/Users/fried/OneDrive/Senior Year backup/Github/OpenValvometry/OpenValvometry/" #set your root directory
setwd(paste0(root,"/raw data"))
data1<-scan("clamdata 101121.txt",what = "character",sep = "\n") %>%  #import the single column arduino data
matrix(ncol = 5,byrow = TRUE)%>%
as.data.frame()
colnames(data1)=c("datetime","Sensor1","Sensor2", "Sensor3", "Sensor4") #rename columns
View(data1)
View(data1)
data1<-data1 %>% #change matrix to data frame
mutate(Sensor1 = str_remove(Sensor1,"Sensor 1: "),
Sensor2 = str_remove(Sensor2,"Sensor 2: "),
Sensor3 = str_remove(Sensor3,"Sensor 3: "),
Sensor4 = str_remove(Sensor4,"Sensor 4: "),
datetime = ymd_hms(paste(year(datetime),month(datetime),day(datetime)," ",hour(datetime),":",minute(datetime),":",second(datetime))))
View(data1)
data1<-data1 %>% #change matrix to data frame
mutate(Sensor1 = str_remove(Sensor1,"Sensor 1: "),
Sensor2 = str_remove(Sensor2,"Sensor 2: "),
Sensor3 = str_remove(Sensor3,"Sensor 3: "),
Sensor4 = str_remove(Sensor4,"Sensor 4: "),
datetime = ymd_hms(paste(year(datetime),month(datetime),day(datetime)," ",hour(datetime),":",minute(datetime),":",second(datetime))))%>%
distinct()%>%
arrange(datetime)%>%
as_tbl_time(index = datetime)
data1<-data1 %>% #change matrix to data frame
mutate(Sensor1 = str_remove(Sensor1,"Sensor 1: "),
Sensor2 = str_remove(Sensor2,"Sensor 2: "),
Sensor3 = str_remove(Sensor3,"Sensor 3: "),
Sensor4 = str_remove(Sensor4,"Sensor 4: "),
datetime = ymd_hms(paste(year(datetime),month(datetime),day(datetime)," ",hour(datetime),":",minute(datetime),":",second(datetime))))%>%
distinct()%>%
arrange(datetime)%>%
as_tbl_time(index = datetime)%>%
mutate(date = as_date(datetime))
View(data1)
time1<-data1 %>% #change matrix to data frame
mutate(Sensor1 = str_remove(Sensor1,"Sensor 1: "),
Sensor2 = str_remove(Sensor2,"Sensor 2: "),
Sensor3 = str_remove(Sensor3,"Sensor 3: "),
Sensor4 = str_remove(Sensor4,"Sensor 4: "),
datetime = ymd_hms(paste(year(datetime),month(datetime),day(datetime)," ",hour(datetime),":",minute(datetime),":",second(datetime))))%>%
distinct()%>%
arrange(datetime)%>%
as_tbl_time(index = datetime)%>%
mutate(date = as_date(datetime))
View(time1)
time1<-data1 %>% #change matrix to data frame
mutate(Sensor1 = str_remove(Sensor1,"Sensor 1: "),
Sensor2 = str_remove(Sensor2,"Sensor 2: "),
Sensor3 = str_remove(Sensor3,"Sensor 3: "),
Sensor4 = str_remove(Sensor4,"Sensor 4: "),
datetime = ymd_hms(paste(year(datetime),month(datetime),day(datetime)," ",hour(datetime),":",minute(datetime),":",second(datetime))))%>%
distinct()%>%
arrange(datetime)%>%
as_tbl_time(index = datetime)%>%
mutate(date = as_date(datetime),
Sensor1 = as.numeric(Sensor1),
Sensor2 = as.numeric(Sensor2),
Sensor3 = as.numeric(Sensor3))
View(time1)
#importing past data (comment out lines 60-65 and uncomment line 66 if you don't have past data)
setwd(paste0(root,"/processed data"))
pastdata<-read.csv("raw valvometry data final.csv") %>%
rename(datetime = timedate) %>%
mutate(datetime = as_datetime(datetime)) %>%
select(-c(date,zscore1,zscore2,zscore3))
pastdata<-read.csv("raw valvometry data final.csv") %>%
rename(datetime = timedate) %>%
mutate(datetime = as_datetime(datetime)) %>%
select(-c(zscore1,zscore2,zscore3))
View(pastdata)
pastdata$X<-NULL #remove X column
pd<-as_tbl_time(pastdata,index=datetime) #create time tibble
save(pd,"pastdata.rData")
save(pd,file="pastdata.rData")
root<-"C:/Users/fried/OneDrive/Senior Year backup/Github/OpenValvometry/OpenValvometry/" #set your root directory
setwd(paste0(root,"/raw data"))
data1<-scan("clamdata 101121.txt",what = "character",sep = "\n") %>%  #import the single column arduino data
matrix(ncol = 5,byrow = TRUE)%>%
as.data.frame()
colnames(data1)=c("datetime","Sensor1","Sensor2", "Sensor3", "Sensor4") #rename columns
time1<-data1 %>% #change matrix to data frame
mutate(Sensor1 = str_remove(Sensor1,"Sensor 1: "),
Sensor2 = str_remove(Sensor2,"Sensor 2: "),
Sensor3 = str_remove(Sensor3,"Sensor 3: "),
Sensor4 = str_remove(Sensor4,"Sensor 4: "),
datetime = ymd_hms(paste(year(datetime),month(datetime),day(datetime)," ",hour(datetime),":",minute(datetime),":",second(datetime))))%>%
distinct()%>%
arrange(datetime)%>%
as_tbl_time(index = datetime)%>%
mutate(date = as_date(datetime),
Sensor1 = as.numeric(Sensor1),
Sensor2 = as.numeric(Sensor2),
Sensor3 = as.numeric(Sensor3))
#importing past data (comment out lines 60-65 and uncomment line 66 if you don't have past data)
setwd(paste0(root,"/processed data"))
load("pastdata.rData")
View(pd)
View(time1)
#merging past data
alltime<-rbind(pd,time1,fill=TRUE) %>%
distinct(alltime)%>%
arrange(datetime) %>%
mutate(date = as_date(datetime)) %>%
as_tbl_time(index = datetime)
#merging past data
alltime<-bind_rows(pd,time1,fill=TRUE) %>%
distinct(alltime)%>%
arrange(datetime) %>%
mutate(date = as_date(datetime)) %>%
as_tbl_time(index = datetime)
#merging past data
alltime<-bind_rows(pd,time1) %>%
distinct(alltime)%>%
arrange(datetime) %>%
mutate(date = as_date(datetime)) %>%
as_tbl_time(index = datetime)
View(time1)
View(pd)
time1<-data1 %>% #change matrix to data frame
mutate(Sensor1 = str_remove(Sensor1,"Sensor 1: "),
Sensor2 = str_remove(Sensor2,"Sensor 2: "),
Sensor3 = str_remove(Sensor3,"Sensor 3: "),
Sensor4 = str_remove(Sensor4,"Sensor 4: "),
datetime = ymd_hms(paste(year(datetime),month(datetime),day(datetime)," ",hour(datetime),":",minute(datetime),":",second(datetime))))%>%
distinct()%>%
arrange(datetime)%>%
as_tbl_time(index = datetime)%>%
mutate(Sensor1 = as.numeric(Sensor1),
Sensor2 = as.numeric(Sensor2),
Sensor3 = as.numeric(Sensor3),
Sensor4 = as.numeric())
root<-"C:/Users/fried/OneDrive/Senior Year backup/Github/OpenValvometry/OpenValvometry/" #set your root directory
setwd(paste0(root,"/raw data"))
data1<-scan("clamdata 101121.txt",what = "character",sep = "\n") %>%  #import the single column arduino data
matrix(ncol = 5,byrow = TRUE)%>%
as.data.frame()
colnames(data1)=c("datetime","Sensor1","Sensor2", "Sensor3", "Sensor4") #rename columns
time1<-data1 %>% #change matrix to data frame
mutate(Sensor1 = str_remove(Sensor1,"Sensor 1: "),
Sensor2 = str_remove(Sensor2,"Sensor 2: "),
Sensor3 = str_remove(Sensor3,"Sensor 3: "),
Sensor4 = str_remove(Sensor4,"Sensor 4: "),
datetime = ymd_hms(paste(year(datetime),month(datetime),day(datetime)," ",hour(datetime),":",minute(datetime),":",second(datetime))))%>%
distinct()%>%
arrange(datetime)%>%
as_tbl_time(index = datetime)%>%
mutate(Sensor1 = as.numeric(Sensor1),
Sensor2 = as.numeric(Sensor2),
Sensor3 = as.numeric(Sensor3),
Sensor4 = as.numeric())
time1<-data1 %>% #change matrix to data frame
mutate(Sensor1 = str_remove(Sensor1,"Sensor 1: "),
Sensor2 = str_remove(Sensor2,"Sensor 2: "),
Sensor3 = str_remove(Sensor3,"Sensor 3: "),
Sensor4 = str_remove(Sensor4,"Sensor 4: "),
datetime = ymd_hms(paste(year(datetime),month(datetime),day(datetime)," ",hour(datetime),":",minute(datetime),":",second(datetime))))%>%
distinct()%>%
arrange(datetime)%>%
as_tbl_time(index = datetime)%>%
mutate(Sensor1 = as.numeric(Sensor1),
Sensor2 = as.numeric(Sensor2),
Sensor3 = as.numeric(Sensor3),
Sensor4 = as.numeric(NA))
View(time1)
#importing past data (comment out lines 60-65 and uncomment line 66 if you don't have past data)
setwd(paste0(root,"/processed data"))
load("pastdata.rData")
#merging past data
alltime<-bind_rows(pd,time1) %>%
distinct(alltime)%>%
arrange(datetime) %>%
mutate(date = as_date(datetime)) %>%
as_tbl_time(index = datetime)
#merging past data
alltime<-rbind(pd,time1) %>%
distinct(alltime)%>%
arrange(datetime) %>%
mutate(date = as_date(datetime)) %>%
as_tbl_time(index = datetime)
View(time1)
View(pd)
View(time1)
View(pd)
root<-"C:/Users/fried/OneDrive/Senior Year backup/Github/OpenValvometry/OpenValvometry/" #set your root directory
setwd(paste0(root,"/raw data"))
data1<-scan("clamdata 101121.txt",what = "character",sep = "\n") %>%  #import the single column arduino data
matrix(ncol = 5,byrow = TRUE)%>%
as.data.frame()
colnames(data1)=c("datetime","Sensor1","Sensor2", "Sensor3", "Sensor4") #rename columns
time1<-data1 %>% #change matrix to data frame
mutate(Sensor1 = str_remove(Sensor1,"Sensor 1: "),
Sensor2 = str_remove(Sensor2,"Sensor 2: "),
Sensor3 = str_remove(Sensor3,"Sensor 3: "),
Sensor4 = str_remove(Sensor4,"Sensor 4: "),
datetime = ymd_hms(paste(year(datetime),month(datetime),day(datetime)," ",hour(datetime),":",minute(datetime),":",second(datetime))))%>%
distinct()%>%
arrange(datetime)%>%
as_tbl_time(index = datetime)%>%
mutate(Sensor1 = as.numeric(Sensor1),
Sensor2 = as.numeric(Sensor2),
Sensor3 = as.numeric(Sensor3))
#importing past data (comment out lines 60-65 and uncomment line 66 if you don't have past data)
setwd(paste0(root,"/processed data"))
load("pastdata.rData")
pd$Sensor4<-NA
#merging past data
alltime<-rbind(pd,time1) %>%
distinct(alltime)%>%
arrange(datetime) %>%
mutate(date = as_date(datetime)) %>%
as_tbl_time(index = datetime)
#merging past data
alltime<-rbind(pd,time1) %>%
distinct()%>%
arrange(datetime) %>%
mutate(date = as_date(datetime)) %>%
as_tbl_time(index = datetime)
View(alltime)
#create sensor 3 daily mean/sd datasheet
meansd3<-alltime %>%
collapse_by("day") %>%
group_by(date)%>%
summarise(mean=mean(Sensor3,is.NA=FALSE),sd=sd(Sensor3))
colnames(meansd3)<-c("date","mean.S3","sd.S3")
meansd1<-alltime %>%
collapse_by("day") %>%
group_by(date)%>%
summarise(mean=mean(Sensor1,is.NA=FALSE),sd=sd(Sensor1))
colnames(meansd1)<-c("date","mean.S1","sd.S1")
meansd2<-alltime %>%
collapse_by("day") %>%
group_by(date)%>%
summarise(mean=mean(Sensor2,is.NA=FALSE),sd=sd(Sensor2))
colnames(meansd2)<-c("date","mean.S2","sd.S2")
library(stringr)
library(ggplot2)
library(lubridate)
library(scales)
library(tibbletime)
library(tidyverse)
alltimed<-alltime %>%
merge(meansd3,by="date")%>%
merge(meansd2,by="date")%>%
merge(meansd1,by="date")%>%
mutate(zscore3 = (Sensor3-mean.S3)/sd.S3,
zscore2 = (Sensor2-mean.S2)/sd.S2,
zscore1 = (Sensor1-mean.S1)/sd.S1)%>%
as_tbl_time(index=datetime)%>%
mutate(entrynumber = seq(1,length(timeclean),by=1))
alltimed<-alltime %>%
merge(meansd3,by="date")%>%
merge(meansd2,by="date")%>%
merge(meansd1,by="date")%>%
mutate(zscore3 = (Sensor3-mean.S3)/sd.S3,
zscore2 = (Sensor2-mean.S2)/sd.S2,
zscore1 = (Sensor1-mean.S1)/sd.S1)%>%
as_tbl_time(index=datetime)%>%
mutate(entrynumber = seq(1,length(datetime),by=1))
peaks2.3<-findpeaks(alltimed2$zscore3,nups=2,ndowns=2,zero="+")
library(pracma)
peaks2.3<-findpeaks(alltimed2$zscore3,nups=2,ndowns=2,zero="+")
peaks2.3<-findpeaks(alltimed$zscore3,nups=2,ndowns=2,zero="+")
View(peaks2.3)
#create index of peaks in the dataset
peaks2.3<-findpeaks(alltimed$zscore3,nups=2,ndowns=2,zero="+") %>%
data.frame()%>%
colnames(peaks2.3)<- c("peakval3","entrynumber","peakstart3","peakend3") #rename columns
#create index of peaks in the dataset
peaks2.3<-findpeaks(alltimed$zscore3,nups=2,ndowns=2,zero="+") %>%
data.frame()
colnames(peaks2.3)<- c("peakval3","entrynumber","peakstart3","peakend3") #rename columns
peaks2.3$closurelength3<-(peaks2.3$peakend3-peaks2.3$peakstart3)*5 #column with closure lengths
peaks2.3<-findpeaks(alltimed$zscore3,nups=2,ndowns=2,zero="+") %>%
data.frame()
colnames(peaks2.3)<- c("peakval3","entrynumber","peakstart3","peakend3") #rename columns
peaks2.3$closurelength3<-(peaks2.3$peakend3-peaks2.3$peakstart3)*5 #column with closure lengths
peaks2.2<-findpeaks(alltimed$zscore2,nups=2,ndowns=2,zero="+") %>%
data.frame()
colnames(peaks2.2)<- c("peakval2","entrynumber","peakstart2","peakend2") #rename columns
peaks2.2$closurelength2<-(peaks2.2$peakend2-peaks2.2$peakstart2)*5 #column with closure lengths
peaks2.1<-findpeaks(alltimed$zscore1,nups=2,ndowns=2,zero="+") %>%
data.frame()
colnames(peaks2.1)<- c("peakval3","entrynumber","peakstart3","peakend3") #rename columns
peaks2.1$closurelength1<-(peaks2.1$peakend1-peaks2.1$peakstart1)*5 #column with closure lengths
peaks2.1<-findpeaks(alltimed$zscore1,nups=2,ndowns=2,zero="+") %>%
data.frame()
colnames(peaks2.1)<- c("peakval1","entrynumber","peakstart1","peakend1") #rename columns
peaks2.1$closurelength1<-(peaks2.1$peakend1-peaks2.1$peakstart1)*5 #column with closure lengths
peaksm1t<-peaks2.1 %>%
merge(alltimed,by="entrynumber")
peaksm2t<-peaks2.2 %>%
merge(alltimed,by="entrynumber")
peaksm3t<-peaks2.3 %>%
merge(alltimed,by="entrynumber")
